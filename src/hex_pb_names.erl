%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.6
-module(hex_pb_names).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).



-spec encode_msg(_,atom()) -> binary().
encode_msg(Msg, MsgName) ->
    encode_msg(Msg, MsgName, []).


-spec encode_msg(_,atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    verify_msg(Msg, MsgName, Opts),
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Package' -> e_msg_Package(Msg, TrUserData);
      'Names' -> e_msg_Names(Msg, TrUserData)
    end.



e_msg_Package(Msg, TrUserData) ->
    e_msg_Package(Msg, <<>>, TrUserData).


e_msg_Package(#{name := F1} = M, Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    case M of
      #{repository := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    e_type_string(TrF2, <<B1/binary, 18>>)
	  end;
      _ -> B1
    end.

e_msg_Names(Msg, TrUserData) ->
    e_msg_Names(Msg, <<>>, TrUserData).


e_msg_Names(#{packages := F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> e_field_Names_packages(TrF1, Bin, TrUserData)
      end
    end.

e_mfield_Names_packages(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Package(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Names_packages([Elem | Rest], Bin,
		       TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Names_packages(id(Elem, TrUserData),
				   Bin2, TrUserData),
    e_field_Names_packages(Rest, Bin3, TrUserData);
e_field_Names_packages([], Bin, _TrUserData) -> Bin.



e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Package' -> d_msg_Package(Bin, TrUserData);
      'Names' -> d_msg_Names(Bin, TrUserData)
    end.



d_msg_Package(Bin, TrUserData) ->
    dfp_read_field_def_Package(Bin, 0, 0,
			       id('$undef', TrUserData),
			       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Package(<<10, Rest/binary>>, Z1, Z2,
			   F1, F2, TrUserData) ->
    d_field_Package_name(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Package(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2, TrUserData) ->
    d_field_Package_repository(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_Package(<<>>, 0, 0, F1, F2, _) ->
    S1 = #{name => F1},
    if F2 == '$undef' -> S1;
       true -> S1#{repository => F2}
    end;
dfp_read_field_def_Package(Other, Z1, Z2, F1, F2,
			   TrUserData) ->
    dg_read_field_def_Package(Other, Z1, Z2, F1, F2,
			      TrUserData).

dg_read_field_def_Package(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Package(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
dg_read_field_def_Package(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Package_name(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_Package_repository(Rest, 0, 0, F1, F2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Package(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_Package(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_Package(Rest, 0, 0, F1, F2,
					      TrUserData);
	    5 -> skip_32_Package(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_Package(<<>>, 0, 0, F1, F2, _) ->
    S1 = #{name => F1},
    if F2 == '$undef' -> S1;
       true -> S1#{repository => F2}
    end.

d_field_Package_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, TrUserData)
    when N < 57 ->
    d_field_Package_name(Rest, N + 7, X bsl N + Acc, F1, F2,
			 TrUserData);
d_field_Package_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Package(Rest2, 0, 0, NewFValue, F2,
			       TrUserData).


d_field_Package_repository(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_Package_repository(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_Package_repository(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Package(Rest2, 0, 0, F1, NewFValue,
			       TrUserData).


skip_varint_Package(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, TrUserData) ->
    skip_varint_Package(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_Package(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, TrUserData) ->
    dfp_read_field_def_Package(Rest, Z1, Z2, F1, F2,
			       TrUserData).


skip_length_delimited_Package(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Package(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_Package(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Package(Rest2, 0, 0, F1, F2,
			       TrUserData).


skip_32_Package(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		TrUserData) ->
    dfp_read_field_def_Package(Rest, Z1, Z2, F1, F2,
			       TrUserData).


skip_64_Package(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		TrUserData) ->
    dfp_read_field_def_Package(Rest, Z1, Z2, F1, F2,
			       TrUserData).


d_msg_Names(Bin, TrUserData) ->
    dfp_read_field_def_Names(Bin, 0, 0, id([], TrUserData),
			     TrUserData).

dfp_read_field_def_Names(<<10, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    d_field_Names_packages(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Names(<<>>, 0, 0, F1, TrUserData) ->
    #{packages => lists_reverse(F1, TrUserData)};
dfp_read_field_def_Names(Other, Z1, Z2, F1,
			 TrUserData) ->
    dg_read_field_def_Names(Other, Z1, Z2, F1, TrUserData).

dg_read_field_def_Names(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Names(Rest, N + 7, X bsl N + Acc, F1,
			    TrUserData);
dg_read_field_def_Names(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Names_packages(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Names(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_Names(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_Names(Rest, 0, 0, F1, TrUserData);
	    5 -> skip_32_Names(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_Names(<<>>, 0, 0, F1, TrUserData) ->
    #{packages => lists_reverse(F1, TrUserData)}.

d_field_Names_packages(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Names_packages(Rest, N + 7, X bsl N + Acc, F1,
			   TrUserData);
d_field_Names_packages(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Package(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Names(Rest2, 0, 0,
			     cons(NewFValue, F1, TrUserData), TrUserData).


skip_varint_Names(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    skip_varint_Names(Rest, Z1, Z2, F1, TrUserData);
skip_varint_Names(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_Names(Rest, Z1, Z2, F1, TrUserData).


skip_length_delimited_Names(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Names(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
skip_length_delimited_Names(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Names(Rest2, 0, 0, F1, TrUserData).


skip_32_Names(<<_:32, Rest/binary>>, Z1, Z2, F1,
	      TrUserData) ->
    dfp_read_field_def_Names(Rest, Z1, Z2, F1, TrUserData).


skip_64_Names(<<_:64, Rest/binary>>, Z1, Z2, F1,
	      TrUserData) ->
    dfp_read_field_def_Names(Rest, Z1, Z2, F1, TrUserData).






merge_msgs(Prev, New, MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Package' -> merge_msg_Package(Prev, New, TrUserData);
      'Names' -> merge_msg_Names(Prev, New, TrUserData)
    end.

merge_msg_Package(#{} = PMsg, #{name := NFname} = NMsg,
		  _) ->
    S1 = #{name => NFname},
    case {PMsg, NMsg} of
      {_, #{repository := NFrepository}} ->
	  S1#{repository => NFrepository};
      {#{repository := PFrepository}, _} ->
	  S1#{repository => PFrepository};
      _ -> S1
    end.

merge_msg_Names(#{packages := PFpackages},
		#{packages := NFpackages}, TrUserData) ->
    #{packages =>
	  'erlang_++'(PFpackages, NFpackages, TrUserData)}.



verify_msg(Msg, MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Package' ->
	  v_msg_Package(Msg, ['Package'], TrUserData);
      'Names' -> v_msg_Names(Msg, ['Names'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_Package/3}).
v_msg_Package(#{name := F1} = M, Path, _) ->
    v_type_string(F1, [name | Path]),
    case M of
      #{repository := F2} ->
	  v_type_string(F2, [repository | Path]);
      _ -> ok
    end,
    ok;
v_msg_Package(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [name] -- maps:keys(M),
		   'Package'},
		  M, Path);
v_msg_Package(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Package'}, X, Path).

-dialyzer({nowarn_function,v_msg_Names/3}).
v_msg_Names(#{packages := F1}, Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Package(Elem, [packages | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Package'}}, F1,
			 Path)
    end,
    ok;
v_msg_Names(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [packages] -- maps:keys(M), 'Names'},
		  M, Path);
v_msg_Names(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Names'}, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{msg, 'Package'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => required, opts => []},
       #{name => repository, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'Names'},
      [#{name => packages, fnum => 1, rnum => 2,
	 type => {msg, 'Package'}, occurrence => repeated,
	 opts => []}]}].


get_msg_names() -> ['Package', 'Names'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Package') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => required, opts => []},
     #{name => repository, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []}];
find_msg_def('Names') ->
    [#{name => packages, fnum => 1, rnum => 2,
       type => {msg, 'Package'}, occurrence => repeated,
       opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.26.6".

gpb_version_as_list() ->
    [3,26,6].
